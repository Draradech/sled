#!/bin/sh

# kslink, the only 'linker' stupid enough to link C programs together by concatenating them

GFX_FUNCS="init deinit reset draw"
OUT_FUNCS="init deinit set clear render getx gety wait_until wait_until_break"
ALL_FUNCS="init deinit reset draw set clear render getx gety wait_until wait_until_break"

RVL=""
for x in "$@"; do
 name=`echo $x | grep -o [^/]*\.c$ | grep -o ^[^\.]*`
 RVL="$name $RVL"
 # repeated later
 FUNCS=$GFX_FUNCS
 echo $name | grep "^out_" >/dev/null 2>/dev/null && FUNCS=$OUT_FUNCS
 echo $name | grep "^flt_" >/dev/null 2>/dev/null && FUNCS=$OUT_FUNCS
 # --
 # File to write this wrapper to
 FN="modwraps/$name.c"
 FNLD="modwraps/$name.incs"
 FNLS="../src/modules/$name.incs"
 rm -f $FNLD
 cp $FNLS $FNLD 2>/dev/null
 echo "// Autogenerated function wrapper" > $FN
 for y in $FUNCS; do
  echo "#define $y kslink_"$name"_"$y >> $FN
  # we no longer have the actual function signature around in the main file,
  # so use a random type and refer to it with &
  echo "extern int kslink_"$name"_"$y"; // DELIBERATE TYPE INCOMPATIBILITY"
 done
 echo "#include \"$x\"" >> $FN
 for y in $FUNCS; do
  echo "#undef $y" >> $FN
 done
done
echo "#include <modloader.h>"
echo "#include <loadcore.h>"
echo "#include <assert.h>"
echo "#include <stdlib.h>"
echo "#include <string.h>"
echo "typedef struct kslink_module {"
for y in $ALL_FUNCS; do
 echo "	void * $y;"
done
echo "} kslink_module;"
for name in $RVL; do
 echo "static kslink_module kslink_"$name"_MOD = {"
 # this is repeated from the previous
 FUNCS=$GFX_FUNCS
 echo $name | grep "^out_" >/dev/null 2>/dev/null && FUNCS=$OUT_FUNCS
 echo $name | grep "^flt_" >/dev/null 2>/dev/null && FUNCS=$OUT_FUNCS
 for y in $FUNCS; do
  echo " .$y = &kslink_"$name"_$y,"
 done
 # --
 echo "};"
done
echo "char ** loadcore_init(char * dir, int * argc) {"
echo "	char ** basis = malloc(sizeof(char*) * `echo $RVL | wc -w`);"
echo "	assert(basis);"
RVLI=0
for name in $RVL; do
 echo "	assert((basis[$RVLI] = strdup(\"$name\")));"
 RVLI=`expr $RVLI + 1`
done
echo "	*argc = $RVLI;"
echo "	return basis;"
echo "}"
echo "void * loadcore_open(const char * str) {"
for name in $RVL; do
 echo "	if (!strcmp(str, \""$name"\"))"
 echo "		return &kslink_"$name"_MOD;"
done
echo "	return NULL;"
echo "}"
echo "void * loadcore_sym(void * targ, const char * str) {"
echo "	kslink_module * mstar = (kslink_module *) targ;"
for y in $ALL_FUNCS; do
 echo "	if (!strcmp(str, \"$y\"))"
 echo "		return mstar->$y;"
done
echo "	return NULL;"
echo "}"
echo "char * loadcore_error() {"
echo "	return 0;"
echo "}"
echo "void loadcore_close(void * targ) {"
echo "}"
